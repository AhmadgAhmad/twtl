- Program the AST 
- Program the computation of the robustness 



As for 9.22.22: 
- Debug the computation of robustness: 
    - Formulate a feasible example to test upon  
    - AND and OR operators 
- TWTL-RRT* 
    - Modify the STL-RRT* code and test it (No automaton whatsoever)
    - Think about how the language guided work and use that alongside with maximizing the robustness
    - How PFSA could help? How the predicated guards would work in your case? 
- Create the Syntax/Semantics for wTWTL
    - Update the grammar file 

As for 10.14.22: 
>>> the main planning loop: 
- Initialize 
- Translate the TWTL specs to an Automaton 
    - What is the class of the automaton states? If networkX, can In add more attributes? 
- Instantiate the product automaton 
- Sample from the Sp taking into account the frequency of the s's



$$$$$$$$$$$$$$ Where Should I resume: 

- Define the specs using APs 
- Create a method that maps from APs to predicates
- Use that mapping function when computing the TWTL robustness 


- Debug the robustness computation after the updated  
- 
- Make sure the sampling based planning algorithm in fact works without the robustness and the TWTL stuff
- >>Deterministic sampling<<. 
    - Plotting the generated deterministic tree
    - Plot multiple deterministic trees 
    - For each deterministic tree, compute the robustness of the generated path
    - Keep track of the time when extending a new vertex 

#####################################################################
### Problem to be fixed and currently compensated with hardcodes: ###
#####################################################################
- Return the alphabet of the predicated ast as AST of the normal form: We'll use such NF in the computation of belonging to a set
- For the sampling, be more efficient in sampling. The current approach samples s then search 
for the nearest amongst the product states with the same s component, sample   

- * Given the updated grammar, ,ake sure to update the robustness function. 

- Create a function handler based off the predicates that extract the predicate function once and for all.
  Keep extracting the predicates ever time is not efficient. 
- Update LOMAP to python3! Basically upgrade networkx to the latest version which everything works fine.  




<><><> Questions <><><>
 